// Copyright 2020-2022 Manta Network.
// This file is part of Manta.

// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// --chain=calamari-dev
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --repeat=20
// --steps=50
// --template=.github/resources/frame-weight-template.hbs
// --output=pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_multisig.
pub trait WeightInfo {
        fn as_multi_threshold_1(z: u32, ) -> Weight;
        fn as_multi_create(s: u32, z: u32, ) -> Weight;
        fn as_multi_create_store(s: u32, z: u32, ) -> Weight;
        fn as_multi_approve(s: u32, z: u32, ) -> Weight;
        fn as_multi_approve_store(s: u32, z: u32, ) -> Weight;
        fn as_multi_complete(s: u32, z: u32, ) -> Weight;
        fn approve_as_multi_create(s: u32, ) -> Weight;
        fn approve_as_multi_approve(s: u32, ) -> Weight;
        fn approve_as_multi_complete(s: u32, ) -> Weight;
        fn cancel_as_multi(s: u32, ) -> Weight;
}

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for SubstrateWeight<T> {
        fn as_multi_threshold_1(z: u32, ) -> Weight {
                (44_336_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((1_000 as Weight).saturating_mul(z as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn as_multi_create(s: u32, z: u32, ) -> Weight {
                (81_172_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((330_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((3_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn as_multi_create_store(s: u32, z: u32, ) -> Weight {
                (92_903_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((314_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((4_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(T::DbWeight::get().reads(3 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        fn as_multi_approve(s: u32, z: u32, ) -> Weight {
                (62_762_000 as Weight)
                        // Standard Error: 7_000
                        .saturating_add((236_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((3_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        fn as_multi_approve_store(s: u32, z: u32, ) -> Weight {
                (83_115_000 as Weight)
                        // Standard Error: 11_000
                        .saturating_add((381_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((5_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: System Account (r:1 w:1)
        fn as_multi_complete(s: u32, z: u32, ) -> Weight {
                (109_102_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((552_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(T::DbWeight::get().reads(3 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn approve_as_multi_create(s: u32, ) -> Weight {
                (78_030_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((366_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:0)
        fn approve_as_multi_approve(s: u32, ) -> Weight {
                (63_612_000 as Weight)
                        // Standard Error: 11_000
                        .saturating_add((167_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: System Account (r:1 w:1)
        fn approve_as_multi_complete(s: u32, ) -> Weight {
                (154_786_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((597_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(3 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        fn cancel_as_multi(s: u32, ) -> Weight {
                (123_344_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((371_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
}

// For backwards compatibility and tests
impl WeightInfo for () {
        fn as_multi_threshold_1(z: u32, ) -> Weight {
                (44_336_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((1_000 as Weight).saturating_mul(z as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn as_multi_create(s: u32, z: u32, ) -> Weight {
                (81_172_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((330_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((3_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn as_multi_create_store(s: u32, z: u32, ) -> Weight {
                (92_903_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((314_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((4_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(RocksDbWeight::get().reads(3 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        fn as_multi_approve(s: u32, z: u32, ) -> Weight {
                (62_762_000 as Weight)
                        // Standard Error: 7_000
                        .saturating_add((236_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((3_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        fn as_multi_approve_store(s: u32, z: u32, ) -> Weight {
                (83_115_000 as Weight)
                        // Standard Error: 11_000
                        .saturating_add((381_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((5_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: System Account (r:1 w:1)
        fn as_multi_complete(s: u32, z: u32, ) -> Weight {
                (109_102_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((552_000 as Weight).saturating_mul(s as Weight))
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(z as Weight))
                        .saturating_add(RocksDbWeight::get().reads(3 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
        fn approve_as_multi_create(s: u32, ) -> Weight {
                (78_030_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((366_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:0)
        fn approve_as_multi_approve(s: u32, ) -> Weight {
                (63_612_000 as Weight)
                        // Standard Error: 11_000
                        .saturating_add((167_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        // Storage: System Account (r:1 w:1)
        fn approve_as_multi_complete(s: u32, ) -> Weight {
                (154_786_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((597_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(3 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Multisig Multisigs (r:1 w:1)
        // Storage: Multisig Calls (r:1 w:1)
        fn cancel_as_multi(s: u32, ) -> Weight {
                (123_344_000 as Weight)
                        // Standard Error: 2_000
                        .saturating_add((371_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
}
