// Copyright 2020-2022 Manta Network.
// This file is part of Manta.

// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// --chain=calamari-dev
// --pallet=pallet_collective
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --repeat=20
// --steps=50
// --template=.github/resources/frame-weight-template.hbs
// --output=pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collective.
pub trait WeightInfo {
        fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
        fn execute(b: u32, m: u32, ) -> Weight;
        fn propose_execute(b: u32, m: u32, ) -> Weight;
        fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
        fn vote(m: u32, ) -> Weight;
        fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
        fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
        fn close_disapproved(m: u32, p: u32, ) -> Weight;
        fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
        fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for SubstrateWeight<T> {
        // Storage: Council Members (r:1 w:1)
        // Storage: Council Proposals (r:1 w:0)
        // Storage: Council Voting (r:100 w:100)
        // Storage: Council Prime (r:0 w:1)
        fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
                (0 as Weight)
                        // Standard Error: 26_000
                        .saturating_add((35_345_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 26_000
                        .saturating_add((41_691_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
        }
        // Storage: Council Members (r:1 w:0)
        fn execute(b: u32, m: u32, ) -> Weight {
                (36_103_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 0
                        .saturating_add((186_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:0)
        fn propose_execute(b: u32, m: u32, ) -> Weight {
                (41_826_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 0
                        .saturating_add((354_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalCount (r:1 w:1)
        // Storage: Council Voting (r:0 w:1)
        fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
                (53_214_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((14_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((217_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((532_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(4 as Weight))
                        .saturating_add(T::DbWeight::get().writes(4 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Voting (r:1 w:1)
        fn vote(m: u32, ) -> Weight {
                (65_033_000 as Weight)
                        // Standard Error: 4_000
                        .saturating_add((447_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
                (67_580_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((337_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((434_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(3 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
                (72_000_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((13_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((407_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((549_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(4 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Prime (r:1 w:0)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn close_disapproved(m: u32, p: u32, ) -> Weight {
                (72_644_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((366_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((444_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(4 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Prime (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
                (87_171_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((9_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((375_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((523_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(5 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council Voting (r:0 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn disapprove_proposal(p: u32, ) -> Weight {
                (40_637_000 as Weight)
                        // Standard Error: 1_000
                        .saturating_add((522_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
}

// For backwards compatibility and tests
impl WeightInfo for () {
        // Storage: Council Members (r:1 w:1)
        // Storage: Council Proposals (r:1 w:0)
        // Storage: Council Voting (r:100 w:100)
        // Storage: Council Prime (r:0 w:1)
        fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
                (0 as Weight)
                        // Standard Error: 26_000
                        .saturating_add((35_345_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 26_000
                        .saturating_add((41_691_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
        }
        // Storage: Council Members (r:1 w:0)
        fn execute(b: u32, m: u32, ) -> Weight {
                (36_103_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 0
                        .saturating_add((186_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:0)
        fn propose_execute(b: u32, m: u32, ) -> Weight {
                (41_826_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((6_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 0
                        .saturating_add((354_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalCount (r:1 w:1)
        // Storage: Council Voting (r:0 w:1)
        fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
                (53_214_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((14_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((217_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((532_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(4 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(4 as Weight))
        }
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Voting (r:1 w:1)
        fn vote(m: u32, ) -> Weight {
                (65_033_000 as Weight)
                        // Standard Error: 4_000
                        .saturating_add((447_000 as Weight).saturating_mul(m as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
                (67_580_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((337_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((434_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(3 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
                (72_000_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((13_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((407_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((549_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(4 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Prime (r:1 w:0)
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn close_disapproved(m: u32, p: u32, ) -> Weight {
                (72_644_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((366_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((444_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(4 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Voting (r:1 w:1)
        // Storage: Council Members (r:1 w:0)
        // Storage: Council Prime (r:1 w:0)
        // Storage: Council ProposalOf (r:1 w:1)
        // Storage: Council Proposals (r:1 w:1)
        fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
                (87_171_000 as Weight)
                        // Standard Error: 0
                        .saturating_add((9_000 as Weight).saturating_mul(b as Weight))
                        // Standard Error: 3_000
                        .saturating_add((375_000 as Weight).saturating_mul(m as Weight))
                        // Standard Error: 3_000
                        .saturating_add((523_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(5 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
        // Storage: Council Proposals (r:1 w:1)
        // Storage: Council Voting (r:0 w:1)
        // Storage: Council ProposalOf (r:0 w:1)
        fn disapprove_proposal(p: u32, ) -> Weight {
                (40_637_000 as Weight)
                        // Standard Error: 1_000
                        .saturating_add((522_000 as Weight).saturating_mul(p as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
}
