// Copyright 2020-2022 Manta Network.
// This file is part of Manta.

// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dolphin-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// --chain=dolphin-dev
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --repeat=20
// --steps=50
// --template=.github/resources/frame-weight-template.hbs
// --output=pallet_scheduler.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
        fn on_initialize_periodic_named_resolved(s: u32, ) -> Weight;
        fn on_initialize_named_resolved(s: u32, ) -> Weight;
        fn on_initialize_periodic_resolved(s: u32, ) -> Weight;
        fn on_initialize_resolved(s: u32, ) -> Weight;
        fn on_initialize_named_aborted(s: u32, ) -> Weight;
        fn on_initialize_aborted(s: u32, ) -> Weight;
        fn on_initialize_periodic_named(s: u32, ) -> Weight;
        fn on_initialize_periodic(s: u32, ) -> Weight;
        fn on_initialize_named(s: u32, ) -> Weight;
        fn on_initialize(s: u32, ) -> Weight;
        fn schedule(s: u32, ) -> Weight;
        fn cancel(s: u32, ) -> Weight;
        fn schedule_named(s: u32, ) -> Weight;
        fn cancel_named(s: u32, ) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for SubstrateWeight<T> {
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_periodic_named_resolved(s: u32, ) -> Weight {
                (14_454_000 as Weight)
                        // Standard Error: 30_000
                        .saturating_add((61_783_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named_resolved(s: u32, ) -> Weight {
                (12_714_000 as Weight)
                        // Standard Error: 26_000
                        .saturating_add((48_449_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        fn on_initialize_periodic_resolved(s: u32, ) -> Weight {
                (11_978_000 as Weight)
                        // Standard Error: 31_000
                        .saturating_add((53_764_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        fn on_initialize_resolved(s: u32, ) -> Weight {
                (14_368_000 as Weight)
                        // Standard Error: 28_000
                        .saturating_add((44_639_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:0)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named_aborted(s: u32, ) -> Weight {
                (16_150_000 as Weight)
                        // Standard Error: 21_000
                        .saturating_add((21_358_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:0)
        fn on_initialize_aborted(s: u32, ) -> Weight {
                (20_393_000 as Weight)
                        // Standard Error: 18_000
                        .saturating_add((14_040_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_periodic_named(s: u32, ) -> Weight {
                (29_410_000 as Weight)
                        // Standard Error: 18_000
                        .saturating_add((34_522_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        fn on_initialize_periodic(s: u32, ) -> Weight {
                (29_456_000 as Weight)
                        // Standard Error: 17_000
                        .saturating_add((26_905_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named(s: u32, ) -> Weight {
                (29_866_000 as Weight)
                        // Standard Error: 19_000
                        .saturating_add((21_143_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        fn on_initialize(s: u32, ) -> Weight {
                (30_902_000 as Weight)
                        // Standard Error: 16_000
                        .saturating_add((17_870_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        fn schedule(s: u32, ) -> Weight {
                (42_021_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((165_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn cancel(s: u32, ) -> Weight {
                (42_139_000 as Weight)
                        // Standard Error: 14_000
                        .saturating_add((4_115_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(1 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Lookup (r:1 w:1)
        // Storage: Scheduler Agenda (r:1 w:1)
        fn schedule_named(s: u32, ) -> Weight {
                (50_054_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((198_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Lookup (r:1 w:1)
        // Storage: Scheduler Agenda (r:1 w:1)
        fn cancel_named(s: u32, ) -> Weight {
                (44_500_000 as Weight)
                        // Standard Error: 8_000
                        .saturating_add((4_118_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(T::DbWeight::get().reads(2 as Weight))
                        .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
}

// For backwards compatibility and tests
impl WeightInfo for () {
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_periodic_named_resolved(s: u32, ) -> Weight {
                (14_454_000 as Weight)
                        // Standard Error: 30_000
                        .saturating_add((61_783_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named_resolved(s: u32, ) -> Weight {
                (12_714_000 as Weight)
                        // Standard Error: 26_000
                        .saturating_add((48_449_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        fn on_initialize_periodic_resolved(s: u32, ) -> Weight {
                (11_978_000 as Weight)
                        // Standard Error: 31_000
                        .saturating_add((53_764_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Preimage PreimageFor (r:1 w:1)
        // Storage: Preimage StatusFor (r:1 w:1)
        fn on_initialize_resolved(s: u32, ) -> Weight {
                (14_368_000 as Weight)
                        // Standard Error: 28_000
                        .saturating_add((44_639_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:0)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named_aborted(s: u32, ) -> Weight {
                (16_150_000 as Weight)
                        // Standard Error: 21_000
                        .saturating_add((21_358_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Preimage PreimageFor (r:1 w:0)
        fn on_initialize_aborted(s: u32, ) -> Weight {
                (20_393_000 as Weight)
                        // Standard Error: 18_000
                        .saturating_add((14_040_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_periodic_named(s: u32, ) -> Weight {
                (29_410_000 as Weight)
                        // Standard Error: 18_000
                        .saturating_add((34_522_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:2 w:2)
        fn on_initialize_periodic(s: u32, ) -> Weight {
                (29_456_000 as Weight)
                        // Standard Error: 17_000
                        .saturating_add((26_905_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn on_initialize_named(s: u32, ) -> Weight {
                (29_866_000 as Weight)
                        // Standard Error: 19_000
                        .saturating_add((21_143_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        fn on_initialize(s: u32, ) -> Weight {
                (30_902_000 as Weight)
                        // Standard Error: 16_000
                        .saturating_add((17_870_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        fn schedule(s: u32, ) -> Weight {
                (42_021_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((165_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Scheduler Agenda (r:1 w:1)
        // Storage: Scheduler Lookup (r:0 w:1)
        fn cancel(s: u32, ) -> Weight {
                (42_139_000 as Weight)
                        // Standard Error: 14_000
                        .saturating_add((4_115_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Lookup (r:1 w:1)
        // Storage: Scheduler Agenda (r:1 w:1)
        fn schedule_named(s: u32, ) -> Weight {
                (50_054_000 as Weight)
                        // Standard Error: 3_000
                        .saturating_add((198_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
        // Storage: Scheduler Lookup (r:1 w:1)
        // Storage: Scheduler Agenda (r:1 w:1)
        fn cancel_named(s: u32, ) -> Weight {
                (44_500_000 as Weight)
                        // Standard Error: 8_000
                        .saturating_add((4_118_000 as Weight).saturating_mul(s as Weight))
                        .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
}
