// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for bifrost_farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `localhost`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_farming
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights2/bifrost_farming.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bifrost_farming.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn create_farming_pool() -> Weight;
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn claim() -> Weight;
	fn gauge_withdraw() -> Weight;
}

/// Weights for bifrost_farming using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	// Storage: Farming PoolInfos (r:1 w:0)
	// Storage: Farming GaugePoolInfos (r:1 w:0)
	fn on_initialize() -> Weight {
		Weight::from_ref_time(6_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Farming PoolNextId (r:1 w:1)
	// Storage: Farming GaugePoolNextId (r:1 w:1)
	// Storage: Farming GaugePoolInfos (r:0 w:1)
	// Storage: Farming PoolInfos (r:0 w:1)
	fn create_farming_pool() -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	fn deposit() -> Weight {
		Weight::from_ref_time(53_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	fn withdraw() -> Weight {
		Weight::from_ref_time(30_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	// Storage: Farming GaugeInfos (r:1 w:0)
	fn claim() -> Weight {
		Weight::from_ref_time(31_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Farming GaugePoolInfos (r:1 w:1)
	// Storage: Farming GaugeInfos (r:1 w:1)
	// Storage: Farming PoolInfos (r:1 w:0)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	fn gauge_withdraw() -> Weight {
		Weight::from_ref_time(32_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Farming PoolInfos (r:1 w:0)
	// Storage: Farming GaugePoolInfos (r:1 w:0)
	fn on_initialize() -> Weight {
		Weight::from_ref_time(6_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	// Storage: Farming PoolNextId (r:1 w:1)
	// Storage: Farming GaugePoolNextId (r:1 w:1)
	// Storage: Farming GaugePoolInfos (r:0 w:1)
	// Storage: Farming PoolInfos (r:0 w:1)
	fn create_farming_pool() -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	fn deposit() -> Weight {
		Weight::from_ref_time(53_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	fn withdraw() -> Weight {
		Weight::from_ref_time(30_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Farming PoolInfos (r:1 w:1)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	// Storage: Farming GaugeInfos (r:1 w:0)
	fn claim() -> Weight {
		Weight::from_ref_time(31_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Farming GaugePoolInfos (r:1 w:1)
	// Storage: Farming GaugeInfos (r:1 w:1)
	// Storage: Farming PoolInfos (r:1 w:0)
	// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	fn gauge_withdraw() -> Weight {
		Weight::from_ref_time(32_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
